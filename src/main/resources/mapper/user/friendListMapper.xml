<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.go.ogamprj.mapper.FriendDiaryMapper">

    <!--  친구 목록 전체 가져오기  -->
    <select id="friendListSelectAll" resultType="java.util.Map">
        select *
        from member m
            join friend_apply f
            on m.member_email = f.member_email
            left join bgimage i
            on i.bgimg_seq = m.bgimg_seq
        where f.member_op_email =#{myEmail}
        and f.member_email in(
                    (select member_email from member)
                    minus
                    (select block_email from block where member_email = #{myEmail})
                    minus
                    (select member_email from block where block_email =#{myEmail})
        )
        order by f.friend_date desc
    </select>
    <!--  친구리스트 count  -->
    <select id="friendListCount" resultType="int">
        select count(*) from member
        where member_email in (
            (
                select a.member_op_email from friend_apply a
                    join member m
                    on m.member_email = a.member_email
                where a.member_email =#{myEmail}
            )
            minus
            (
                select block_email from block
                where member_email =#{myEmail}
            )
            minus
            (
                select member_email from block
                where block_email =#{myEmail}
            )
        )
    </select>

    <!--  친구리스트 검색 sql  -->
    <select id="search" resultType="java.util.Map">
        select *
        from member m
            join friend_apply f
            on m.member_email = f.member_email
            left join bgimage i
            on i.bgimg_seq = m.bgimg_seq
        where f.member_op_email =#{myEmail}
        and f.member_email in(
                    (select member_email from member)
                    minus
                    (select block_email from block where member_email =#{myEmail})
                    minus
                    (select member_email from block where block_email =#{myEmail})
                )
        and member_nick like '%${searchKeyword}%'
        order by f.friend_date desc

    </select>

    <!--  친구리스트 delete  -->
    <delete id="deleteFriend">
        delete from friend_apply
        where friend_key = (select distinct (friend_key) from friend_apply
                                where friend_key in
                                        (select f.friend_key
                                        from member m
                                                join friend_apply f
                                                on m.member_email = f.member_email
                                            where f.member_op_email = #{myEmail}
                                            and m.member_nick = #{nickname}))
    </delete>

    <!--  친구신청 리스트 전체 가져오기  -->
    <select id="friendSendSelectAll" resultType="java.util.Map">
        select *
        from member m
            join friend_send s
            on m.member_email = s.member_email
            left join bgimage b
            on b.bgimg_seq = m.bgimg_seq
        where s.member_op_email = #{myEmail}
        order by s.send_date desc
    </select>

    <!--  친구목록 뺴고 멤버리스트 가져오기  -->
    <select id="memberSelectAll" resultType="java.util.Map">
        select *
        from member m
        join (
        (select member_email
        from member
        where member_email != #{myEmail})

        minus

        (select member_op_email
        from friend_apply
        where member_email = #{myEmail})

        minus

        (select member_op_email
        from FRIEND_send
        where member_email = #{myEmail})

        minus

        (select member_email
        from FRIEND_send
        where member_op_email = #{myEmail})

        minus

        (select member_email
        from block
        where block_email = #{myEmail})

        minus

        (select block_email
        from block
        where member_email = #{myEmail})

        ) t

        on m.member_email = t.member_email
        left join bgimage i
        on m.bgimg_seq = i.bgimg_seq
    </select>

    <!--  친구목록 뺴고 검색  -->
    <select id="memberSearch" resultType="java.util.Map">
        select *
        from member m
        join (
        (select member_email
        from member
        where member_email != #{myEmail})

        minus

        (select member_op_email
        from friend_apply
        where member_email = #{myEmail})

        minus

        (select member_op_email
        from FRIEND_send
        where member_email = #{myEmail})

        minus

        (select member_email
        from FRIEND_send
        where member_op_email = #{myEmail})

        minus

        (select member_email
        from block
        where member_email = #{myEmail})

        minus

        (select block_email
        from block
        where member_email = #{myEmail})

        ) t

        on m.member_email = t.member_email
        left join bgimage i
        on m.bgimg_seq = i.bgimg_seq
        where member_nick like '%${searchKeyword}%'
    </select>


    <!--  친구리스트에 insert  -->
    <insert id="insertfriendList" parameterType="com.go.ogamprj.dto.FriendApply">
        insert into friend_apply
            values(fri_app_seq.nextval, #{member_email},#{member_op_email},current_date, (select NVL(max(FRIEND_KEY),0)+1 from friend_apply))
    </insert>

    <!--  상대 이메일로 친구리스트 insert  -->
    <insert id="insertfriendList2nd" parameterType="com.go.ogamprj.dto.FriendSend">
        insert into friend_apply
            values(fri_app_seq.nextval, #{member_op_email},#{member_email},current_date, (select max(FRIEND_KEY) from friend_apply))
    </insert>

    <!--  친구신청에 insert  -->
    <insert id="insertfriendSend" parameterType="com.go.ogamprj.dto.FriendSend">
        insert into friend_send (member_email, member_op_email, response)
        values(#{member_email},#{member_op_email},#{response})
    </insert>

    <!--  친구 신청 delete  -->
    <delete id="deleteFriendSend">
        delete from friend_send
        where fri_send_seq = #{fri_send_seq}
    </delete>

</mapper>