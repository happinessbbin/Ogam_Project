<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.go.ogamprj.mapper.DiaryMapper">
    <!-- 내 다이어리 전부 가져오기 -->
    <select id="oneDiarySelectAll" resultType="java.util.HashMap">
        select m.MEMBER_NICK, d.diary_date, e.emoji, d.contents, d.DIARY_SEQ, d.DIARY_PRIVATE
          from diary d join emotions e
            on e.EMOTION_SEQ = d.EMOTION_SEQ
          join member m
            on d.MEMBER_EMAIL = m.member_email
         where d.MEMBER_EMAIL = #{myEmail}
           and d.diary_del = 'n'
         order by d.diary_seq desc
    </select>

    <!-- 친구 다이어리 전부 가져오기 -->
    <select id="friendDiarySelectAll" resultType="java.util.HashMap">
        select m.MEMBER_NICK, d.diary_date, e.emoji, d.contents, d.DIARY_SEQ
          from diary d join emotions e
            on e.EMOTION_SEQ = d.EMOTION_SEQ
          join member m
            on d.MEMBER_EMAIL = m.member_email
         where d.MEMBER_EMAIL in (select MEMBER_OP_EMAIL
                                   from friend_apply
                                  where MEMBER_EMAIL = #{myEmail})
           and diary_private = 'n'
           and d.diary_del = 'n'
         order by d.diary_seq desc
    </select>

    <!-- 랜덤하게 다이어리 가져오기 (10개) -->
    <select id="randomAllDiarySelectAll" resultType="java.util.HashMap">
        select rownum, m.MEMBER_NICK, d.diary_date, e.emoji, d.contents, d.DIARY_SEQ
        from diary d join emotions e
        on e.EMOTION_SEQ = d.EMOTION_SEQ
        join member m
        on m.member_email = d.MEMBER_EMAIL
        where d.DIARY_SEQ in (select CEIL(DBMS_RANDOM.VALUE(0, (select max(DIARY_SEQ)
                                                                  from diary)))DIARY_SEQ
                                from DUAL CONNECT BY LEVEL 	&lt;= 20000)
          and d.diary_private = 'n'
          and d.diary_del = 'n'
          and rownum 	&lt;= 15
    </select>

    <!-- 다이어리 배경이미지 insert -->
    <insert id="bgimageInsert" parameterType="com.go.ogamprj.dto.Bgimage">
        insert into bgimage(bgimg_path,bgimg_title) values(#{bgimg_path},#{bgimg_title})
    </insert>

    <!-- 다이어리 저장 + 배경이미지 seq추출  -->
    <insert id="diaryInsertWithBgimg" parameterType="com.go.ogamprj.dto.Diary">
        insert into
            diary(MEMBER_EMAIL,EMOTION_SEQ,CONTENTS,DIARY_PRIVATE,BGIMG_SEQ)
            values(#{MEMBER_EMAIL},#{EMOTION_SEQ},#{CONTENTS},#{DIARY_PRIVATE},(select max(bgimg_seq)
                                                                                  from bgimage)
            )
    </insert>

    <insert id="diaryInsertNoBgimg" parameterType="com.go.ogamprj.dto.Diary">
        insert into
        diary(MEMBER_EMAIL,EMOTION_SEQ,CONTENTS,DIARY_PRIVATE)
        values(#{MEMBER_EMAIL},#{EMOTION_SEQ},#{CONTENTS},#{DIARY_PRIVATE} )
    </insert>
    
    <select id="diarySelectOne" resultType="java.util.HashMap">
        select *
          from diary d LEFT JOIN bgimage i
            on d.bgimg_seq = i.bgimg_seq
          JOIN emotions e
            on d.emotion_seq = e.emotion_seq
          JOIN member m
            on d.member_email = m.member_email
         where d.diary_seq = #{diarySeq}
    </select>


    <select id="replySelect" resultType="java.util.HashMap">
        select *
          from reply r join member m
            on r.member_email = m.member_email
         where r.diary_seq = #{diarySeq}
           and reply_del = 'n'
         order by reply_seq
    </select>

    <!-- 배경사진 없이 일기 수정 -->
    <update id="diaryUpdateNoBgimg" parameterType="com.go.ogamprj.dto.Diary">
        update diary
           set emotion_seq = #{EMOTION_SEQ}
             , contents = #{CONTENTS}
             , diary_private=#{DIARY_PRIVATE}
         where diary_seq = #{DIARY_SEQ}
    </update>

    <!-- 배경사진 포함 일기 수정 -->
    <update id="diaryUpdateWithBgimg" parameterType="com.go.ogamprj.dto.Diary">
        update diary
           set emotion_seq = #{EMOTION_SEQ}
             , contents = #{CONTENTS}
             , diary_private=#{DIARY_PRIVATE}
             , BGIMG_SEQ = (select max(bgimg_seq)
                              from bgimage)
         where diary_seq = #{DIARY_SEQ}
    </update>

    <!-- 댓글 수정 -->
    <update id="replyUpdate">
        update reply
           set reply = #{reply}
         where reply_seq = #{reply_seq}
    </update>


    <!-- 다이어리 삭제 -->
    <update id="diaryDelete">
        update diary
           set diary_del = 'y'
         where diary_seq = #{diary_seq}
    </update>

    <!-- 댓글 삭제 -->
    <update id="replyDelete">
        update reply
        set reply_del = 'y'
        where reply_seq = #{reply_seq}
    </update>



    <!-- 일기 신고 -->
    <insert id="diaryReportInsert">
        insert into Blacklist_diary(diary_seq,member_email,blacklist_member_email,blacklist_comment)
        values( #{diary_seq}, #{member_email}, #{blacklist_user_email}, #{blacklist_comment})
    </insert>

    <!-- 댓글 신고 -->
    <insert id="replyReportInsert">
        insert into Blacklist_reply(reply_seq,member_email,blacklist_member_email,blacklist_comment)
        values( #{reply_seq}, #{member_email}, #{blacklist_member_email}, #{blacklist_comment})
    </insert>

    <insert id="replyInsert" parameterType="java.util.Map">
        insert into reply(diary_seq,member_email,reply)
        values(#{diarySeq},#{member_email},#{reply})
    </insert>

    <insert id="likeInsert" parameterType="java.util.Map">
        insert into diary_like(diary_seq,member_email)
        values(#{diary_seq},#{member_email})
    </insert>

    <delete id="likeDelete" parameterType="java.util.Map">
        delete from diary_like
              where diary_seq = #{diary_seq}
                and member_email = #{member_email}
    </delete>

    <!-- 나의 감정 캘린더 -->
    <select id="calendarDiarySelectAll" resultType="java.util.Map">
        SELECT T1.DIARY_DATE as "start", T1.DIARY_SEQ as "id", T2.emoji as "title"
        FROM(SELECT TRUNC(DIARY_DATE,'DD')as DIARY_DATE, MAX(DIARY_SEQ) AS DIARY_SEQ
        FROM DIARY
        where MEMBER_EMAIL = #{memberSeq}
        AND diary_del = 'n'
        GROUP BY TRUNC(DIARY_DATE,'DD')) T1,

        (SELECT T1.DIARY_SEQ, T2.EMOJI
        FROM DIARY T1, EMOTIONS T2
        WHERE T1.EMOTION_SEQ = T2.EMOTION_SEQ) T2
        WHERE T1.DIARY_SEQ = T2.DIARY_SEQ
    </select>

    <!-- 친구 감정 캘린더 -->
    <select id="frndCalendarDiarySelectAll" resultType="java.util.Map">
        SELECT T1.DIARY_DATE as "start", T1.DIARY_SEQ as "id", T2.emoji as "title"
        FROM(SELECT TRUNC(DIARY_DATE,'DD')as DIARY_DATE, MAX(DIARY_SEQ) AS DIARY_SEQ
        FROM DIARY
        where MEMBER_EMAIL = #{memberSeq}
        AND diary_del = 'n'
        AND diary_private = 'n'
        GROUP BY TRUNC(DIARY_DATE,'DD')) T1,

        (SELECT T1.DIARY_SEQ, T2.EMOJI
        FROM DIARY T1, EMOTIONS T2
        WHERE T1.EMOTION_SEQ = T2.EMOTION_SEQ) T2
        WHERE T1.DIARY_SEQ = T2.DIARY_SEQ
    </select>
    <insert id="notifyReplyInsert" parameterType="java.util.Map">
        insert into notifi(member_email, diary_seq, noti_email, noti_type, noti_comm)
        select *
          from (select m.member_email                       as member_email
                     , #{diarySeq}                          as diary_seq
                     , #{loginUser}                         as noti_email
                     , 'reply'                              as noti_type
                     , '일기에 새로운 댓글이 달렸습니다'         as noti_comm
                  from diary d join member m
                    on d.member_email = m.member_email
                 where d.diary_seq = #{diarySeq})
    </insert>
    <insert id="notifyLikeInsert" parameterType="java.util.Map">
        insert into notifi(member_email, diary_seq, noti_email, noti_type, noti_comm)
        select *
          from (select m.member_email                           as member_email
                     , #{diarySeq}                              as diary_seq
                     , #{loginUser}                             as noti_email
                     , 'like'                                   as noti_type
                     , '작성한 일기가 좋아요를 받았습니다'           as noti_comm
                  from diary d join member m
                    on d.member_email = m.member_email
                 where d.diary_seq = #{diarySeq})
    </insert>
</mapper>
